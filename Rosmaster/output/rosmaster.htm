<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\rosmaster.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\rosmaster.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Sep 23 22:20:08 2023
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vTask_IMU &rArr; ICM20948_Read_Data_Handle &rArr; fifo_handler &rArr; process_sensor_output &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from inv_mems_drv_hook.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from bsp_timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from bsp_usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from bsp_usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from bsp_usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from bsp_can.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[51]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[50]">fputc</a> from bsp_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[53]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[52]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[6]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">vTask_App_Handle</a> from app.o(i.vTask_App_Handle) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[4c]">vTask_Auto_Report</a> from app.o(i.vTask_Auto_Report) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[4a]">vTask_Control</a> from app.o(i.vTask_Control) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[4e]">vTask_IMU</a> from app.o(i.vTask_IMU) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[4b]">vTask_Key</a> from app.o(i.vTask_Key) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[4f]">vTask_OLED</a> from app.o(i.vTask_OLED) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[49]">vTask_Speed</a> from app.o(i.vTask_Speed) referenced from app.o(i.App_Start_FreeRTOS)
 <LI><a href="#[8]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_stm32f10x_hd.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[311]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[312]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[313]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[314]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[315]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[316]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>vPortSVCHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30e]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>xPortPendSVHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[317]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[59]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_qfix_mult
</UL>

<P><STRONG><a name="[318]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_remix_u8
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_starbright
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_marquee
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rbg_gradient
</UL>

<P><STRONG><a name="[319]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Reveive
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_GPIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Data
</UL>

<P><STRONG><a name="[2bd]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
</UL>

<P><STRONG><a name="[31b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Fill
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[31d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Raw_Data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Raw_Data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Send_Count_Now
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle_Array
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>

<P><STRONG><a name="[31f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2be]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_YAW
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_rsqrt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Raw_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Attitude_Data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Send_Parm_Active
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Yaw_PID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Clear_Yaw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Yaw_Calc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Battery_Volotage
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_State
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_rsqrt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Measure_Volotage
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Motor_Speed
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[182]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_rsqrt
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q16_to_float
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[320]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Voltage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Yaw_PID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_PID
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[82]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[321]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q16_to_float
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Yaw_Calc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Measure_Volotage
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Voltage
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Yaw_PID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_PID
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_YAW
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Motor_Speed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Handle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Raw_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Attitude_Data
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Send_Parm_Active
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Yaw_Calc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_State
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Yaw_PID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[322]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
</UL>

<P><STRONG><a name="[1ac]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Yaw_PID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_PID
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[2d1]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
</UL>

<P><STRONG><a name="[323]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[324]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[325]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[62]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[75]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[76]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[6a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[69]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[327]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[7a]"></a>ADC_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[a1]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[94]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get
</UL>

<P><STRONG><a name="[93]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get
</UL>

<P><STRONG><a name="[9f]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[9c]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[91]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get
</UL>

<P><STRONG><a name="[9e]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[92]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get
</UL>

<P><STRONG><a name="[a0]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[7c]"></a>Ackerman_Ctrl</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, app_ackerman.o(i.Ackerman_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Limit_int
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_State
</UL>

<P><STRONG><a name="[8e]"></a>Ackerman_Get_Default_Angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_ackerman.o(i.Ackerman_Get_Default_Angle))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Car_Type
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
</UL>

<P><STRONG><a name="[183]"></a>Ackerman_Get_Steer_Angle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_ackerman.o(i.Ackerman_Get_Steer_Angle))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[87]"></a>Ackerman_Send_Default_Angle</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_ackerman.o(i.Ackerman_Send_Default_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Ackerman_Send_Default_Angle &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[89]"></a>Ackerman_Set_Default_Angle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_ackerman.o(i.Ackerman_Set_Default_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Ackerman_Set_Default_Angle &rArr; Flash_Set_AKM_Angle &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_AKM_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AKM_Angle_Init
</UL>

<P><STRONG><a name="[8c]"></a>Ackerman_State</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, app_ackerman.o(i.Ackerman_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl_State
</UL>

<P><STRONG><a name="[7f]"></a>Ackerman_Steering</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_ackerman.o(i.Ackerman_Steering))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ackerman_Steering
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Limit_int
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Get_Default_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_State
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>

<P><STRONG><a name="[8f]"></a>Ackerman_Steering_with_car</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, app_ackerman.o(i.Ackerman_Steering_with_car))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Ackerman_Steering_with_car &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Limit_int
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[95]"></a>Adc_Get_Average</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_adc.o(i.Adc_Get_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adc_Get_Average &rArr; Adc_Get &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Measure_Volotage
</UL>

<P><STRONG><a name="[96]"></a>Adc_Get_Battery_Volotage</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_adc.o(i.Adc_Get_Battery_Volotage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Adc_Get_Battery_Volotage &rArr; Adc_Get_Measure_Volotage &rArr; Adc_Get_Average &rArr; Adc_Get &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Measure_Volotage
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_State
</UL>

<P><STRONG><a name="[97]"></a>Adc_Get_Measure_Volotage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_adc.o(i.Adc_Get_Measure_Volotage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Adc_Get_Measure_Volotage &rArr; Adc_Get_Average &rArr; Adc_Get &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Battery_Volotage
</UL>

<P><STRONG><a name="[98]"></a>Adc_Init</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, bsp_adc.o(i.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Adc_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[a2]"></a>App_Clear_Yaw</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app.o(i.App_Clear_Yaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_Clear_Yaw &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Yaw_Now
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Yaw_Now
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[a6]"></a>App_Delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app.o(i.App_Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_Delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_App_Handle
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Delay_ms
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
</UL>

<P><STRONG><a name="[16b]"></a>App_FreeRTOS_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.App_FreeRTOS_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Delay_ms
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>App_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app.o(i.App_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = App_Init &rArr; ICM_20948_Init &rArr; self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Param_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Error
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Long_Beep_Alarm
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_Beep
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>App_Loop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app.o(i.App_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = App_Loop &rArr; app_rgb_effects_handle &rArr; app_rgb_waterfall &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Timeout_Close_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_App_Handle
</UL>

<P><STRONG><a name="[b4]"></a>App_Send_Version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app.o(i.App_Send_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = App_Send_Version &rArr; Bsp_Send_Version &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Send_Version
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[1fd]"></a>App_Set_OLED_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.App_Set_OLED_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[b6]"></a>App_Start_FreeRTOS</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, app.o(i.App_Start_FreeRTOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = App_Start_FreeRTOS &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>App_Test_Mode_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app.o(i.App_Test_Mode_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = App_Test_Mode_Init &rArr; OLED_Show_Test_Mode &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Test_Mode
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Ctrl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_Beep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[c0]"></a>Bat_Get_Low_Voltage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_bat.o(i.Bat_Get_Low_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bat_Get_Low_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Check_Voltage
</UL>

<P><STRONG><a name="[bf]"></a>Bat_Get_Over_Voltage</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_bat.o(i.Bat_Get_Over_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bat_Get_Over_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Check_Voltage
</UL>

<P><STRONG><a name="[c1]"></a>Bat_Show_LED_Handle</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app_bat.o(i.Bat_Show_LED_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Bat_Show_LED_Handle &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_effect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_State
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_Overvoltage_Battery
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_Low_Battery
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_State
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_App_Handle
</UL>

<P><STRONG><a name="[c2]"></a>Bat_State</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_bat.o(i.Bat_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bat_State &rArr; Adc_Get_Battery_Volotage &rArr; Adc_Get_Measure_Volotage &rArr; Adc_Get_Average &rArr; Adc_Get &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Battery_Volotage
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Check_Voltage
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
</UL>

<P><STRONG><a name="[18a]"></a>Bat_Voltage_Z10</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_bat.o(i.Bat_Voltage_Z10))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Send_Data
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
</UL>

<P><STRONG><a name="[ca]"></a>Beep_GPIO_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_beep.o(i.Beep_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Beep_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ba]"></a>Beep_On_Time</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_beep.o(i.Beep_On_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Beep_On_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Set_Time
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Set_State
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_App_Handle
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Test_Mode_Init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Data
</UL>

<P><STRONG><a name="[b2]"></a>Beep_Timeout_Close_Handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_beep.o(i.Beep_Timeout_Close_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Beep_Timeout_Close_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Set_State
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Get_Time
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Get_State
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Loop
</UL>

<P><STRONG><a name="[a3]"></a>Bsp_Get_Imu_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.Bsp_Get_Imu_Type))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Clear_Yaw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
</UL>

<P><STRONG><a name="[1f3]"></a>Bsp_Get_TestMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.Bsp_Get_TestMode))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
</UL>

<P><STRONG><a name="[d1]"></a>Bsp_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, bsp.o(i.Bsp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Bsp_Init &rArr; Bsp_imu_init &rArr; OLED_Show_Error &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Waiting
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scanf_addr
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SW_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_JTAG_Set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>Bsp_JTAG_Set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp.o(i.Bsp_JTAG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[c4]"></a>Bsp_Led_Show_Low_Battery</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp.o(i.Bsp_Led_Show_Low_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Led_Show_Low_Battery
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
</UL>

<P><STRONG><a name="[c6]"></a>Bsp_Led_Show_Overvoltage_Battery</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, bsp.o(i.Bsp_Led_Show_Overvoltage_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bsp_Led_Show_Overvoltage_Battery
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
</UL>

<P><STRONG><a name="[c3]"></a>Bsp_Led_Show_State</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bsp.o(i.Bsp_Led_Show_State))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
</UL>

<P><STRONG><a name="[af]"></a>Bsp_Long_Beep_Alarm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.Bsp_Long_Beep_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bsp_Long_Beep_Alarm
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
</UL>

<P><STRONG><a name="[e8]"></a>Bsp_MPU_Scanf</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp.o(i.Bsp_MPU_Scanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bsp_MPU_Scanf &rArr; MPU_Read_Byte &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ADDR_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
</UL>

<P><STRONG><a name="[ed]"></a>Bsp_Reset_MCU</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp.o(i.Bsp_Reset_MCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bsp_Reset_MCU &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[b5]"></a>Bsp_Send_Version</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp.o(i.Bsp_Send_Version))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Bsp_Send_Version &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Version
</UL>

<P><STRONG><a name="[1fe]"></a>Bsp_Set_TestMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.Bsp_Set_TestMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[e5]"></a>CAN_Config_Init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, bsp_can.o(i.CAN_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN_Config_Init &rArr; CAN_Filter_Init &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NVIC_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Get_Prescaler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[f1]"></a>CAN_DeInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[f8]"></a>CAN_FilterInit</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32f10x_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Filter_Init
</UL>

<P><STRONG><a name="[fb]"></a>CAN_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NVIC_Init
</UL>

<P><STRONG><a name="[f4]"></a>CAN_Init</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[100]"></a>CAN_MessagePending</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_MessagePending))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Data
</UL>

<P><STRONG><a name="[b0]"></a>CAN_RX_Beep</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_can.o(i.CAN_RX_Beep))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Test_Mode_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[101]"></a>CAN_Receive</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Data
</UL>

<P><STRONG><a name="[ff]"></a>CAN_Receive_Data</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, bsp_can.o(i.CAN_Receive_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_Receive_Data &rArr; Beep_On_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessagePending
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[306]"></a>Clear_CMD_Flag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, protocol.o(i.Clear_CMD_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clear_CMD_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[1bc]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
</UL>

<P><STRONG><a name="[1ba]"></a>DMA_Cmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
</UL>

<P><STRONG><a name="[1b0]"></a>DMA_DeInit</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DMA_Init
</UL>

<P><STRONG><a name="[1e9]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
</UL>

<P><STRONG><a name="[1bb]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
</UL>

<P><STRONG><a name="[1b1]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DMA_Init
</UL>

<P><STRONG><a name="[1b9]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
</UL>

<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, inv_mems_drv_hook.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_data_ready_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Config
</UL>

<P><STRONG><a name="[17e]"></a>Encoder_Get_ALL</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_encoder.o(i.Encoder_Get_ALL))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Encoder
</UL>

<P><STRONG><a name="[e4]"></a>Encoder_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_encoder.o(i.Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Encoder_Init &rArr; Encoder_Init_TIM5 &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[114]"></a>Encoder_Send_Count_Now</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, bsp_encoder.o(i.Encoder_Send_Count_Now))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Encoder_Send_Count_Now &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
</UL>

<P><STRONG><a name="[116]"></a>Encoder_Update_Count</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, bsp_encoder.o(i.Encoder_Update_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder_Update_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Read_CNT
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
</UL>

<P><STRONG><a name="[124]"></a>Flash_ErasePage</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_flash.o(i.Flash_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_ErasePage &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[ab]"></a>Flash_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Flash_Init &rArr; Flash_PID_Init &rArr; Flash_Set_PID &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Reset_State
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CarType_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Auto_Report_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ARM_Mid_Offset_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AKM_Angle_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[12f]"></a>Flash_Read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bsp_flash.o(i.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_ARM_Median_Value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Yaw_PID
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Reset_State
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_PID
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_CarType
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Auto_Report
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_AKM_Angle
</UL>

<P><STRONG><a name="[11b]"></a>Flash_Read_ARM_Median_Value</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_flash.o(i.Flash_Read_ARM_Median_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Read_ARM_Median_Value &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ARM_Mid_Offset_Init
</UL>

<P><STRONG><a name="[11c]"></a>Flash_Reset_ARM_Median_Value</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, app_flash.o(i.Flash_Reset_ARM_Median_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Flash_Reset_ARM_Median_Value &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Median_Value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ARM_Mid_Offset_Init
</UL>

<P><STRONG><a name="[127]"></a>Flash_Reset_All_Value</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Reset_All_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Flash_Reset_All_Value &rArr; Flash_Set_PID &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Yaw_PID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_CarType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Auto_Report
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_ARM_Median_Value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_TestMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_AKM_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[8b]"></a>Flash_Set_AKM_Angle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Set_AKM_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_Set_AKM_Angle &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_AKM_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Set_Default_Angle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AKM_Angle_Init
</UL>

<P><STRONG><a name="[135]"></a>Flash_Set_ARM_Median_Value</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_flash.o(i.Flash_Set_ARM_Median_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Flash_Set_ARM_Median_Value &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Median_Value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Verify_Offset
</UL>

<P><STRONG><a name="[133]"></a>Flash_Set_Auto_Report</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_flash.o(i.Flash_Set_Auto_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Flash_Set_Auto_Report &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Auto_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[134]"></a>Flash_Set_CarType</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Set_CarType))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_Set_CarType &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_CarType
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[12a]"></a>Flash_Set_PID</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, app_flash.o(i.Flash_Set_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Flash_Set_PID &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
</UL>

<P><STRONG><a name="[132]"></a>Flash_Set_TestMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Set_TestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_Set_TestMode &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
</UL>

<P><STRONG><a name="[12d]"></a>Flash_Set_Yaw_PID</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_flash.o(i.Flash_Set_Yaw_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Flash_Set_Yaw_PID &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
</UL>

<P><STRONG><a name="[131]"></a>Flash_Write</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, bsp_flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_NoCheck
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Unlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_ARM_Median_Value
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Yaw_PID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_CarType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Auto_Report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_ARM_Median_Value
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_TestMode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_AKM_Angle
</UL>

<P><STRONG><a name="[13c]"></a>Fourwheel_Ctrl</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, app_fourwheel.o(i.Fourwheel_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fourwheel_Ctrl &rArr; Motion_Stop &rArr; Motion_Set_Speed &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_APB
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_State
</UL>

<P><STRONG><a name="[13e]"></a>Fourwheel_State</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, app_fourwheel.o(i.Fourwheel_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Fourwheel_State &rArr; Fourwheel_Ctrl &rArr; Motion_Stop &rArr; Motion_Set_Speed &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl_State
</UL>

<P><STRONG><a name="[13f]"></a>Fourwheel_Yaw_Calc</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, app_fourwheel.o(i.Fourwheel_Yaw_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Fourwheel_Yaw_Calc &rArr; PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Yaw_Calc
</UL>

<P><STRONG><a name="[142]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Config
</UL>

<P><STRONG><a name="[141]"></a>GPIO_INT_Config</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, icm20948.o(i.GPIO_INT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_INT_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ADDR_CTRL
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SW_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_gpio_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Config
</UL>

<P><STRONG><a name="[fa]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[15c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_is_Press
</UL>

<P><STRONG><a name="[ce]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Error
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Long_Beep_Alarm
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Timeout_Close_Handle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_State
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_Overvoltage_Battery
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_Low_Battery
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ADDR_CTRL
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Long_Beep_Alarm
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_App_Handle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_State
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_Overvoltage_Battery
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Led_Show_Low_Battery
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GPIO_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SW_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_gpio_init
</UL>

<P><STRONG><a name="[303]"></a>Get_CMD_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol.o(i.Get_CMD_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[304]"></a>Get_CMD_Length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol.o(i.Get_CMD_Length))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[307]"></a>Get_Request_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol.o(i.Get_Request_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[305]"></a>Get_RxBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.Get_RxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[144]"></a>ICM20948_Get_Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948.o(i.ICM20948_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ICM20948_Get_Data &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Read_Data_Handle
</UL>

<P><STRONG><a name="[2e8]"></a>ICM20948_Get_Init_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948.o(i.ICM20948_Get_Init_State))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_100us
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
</UL>

<P><STRONG><a name="[a5]"></a>ICM20948_Get_Yaw_Now</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, icm20948.o(i.ICM20948_Get_Yaw_Now))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Clear_Yaw
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[146]"></a>ICM20948_Read_Data_Handle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, icm20948.o(i.ICM20948_Read_Data_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ICM20948_Read_Data_Handle &rArr; fifo_handler &rArr; process_sensor_output &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
</UL>

<P><STRONG><a name="[148]"></a>ICM20948_Send_Attitude_Data</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, icm20948.o(i.ICM20948_Send_Attitude_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ICM20948_Send_Attitude_Data &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
</UL>

<P><STRONG><a name="[149]"></a>ICM20948_Send_Raw_Data</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, icm20948.o(i.ICM20948_Send_Raw_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ICM20948_Send_Raw_Data &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
</UL>

<P><STRONG><a name="[ac]"></a>ICM_20948_Init</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, icm20948.o(i.ICM_20948_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = ICM_20948_Init &rArr; self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[dc]"></a>IIC_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp_io_i2c.o(i.IIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[155]"></a>IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_io_i2c.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scanf_addr
</UL>

<P><STRONG><a name="[157]"></a>IIC_Start</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_io_i2c.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scanf_addr
</UL>

<P><STRONG><a name="[158]"></a>IIC_Stop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_io_i2c.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scanf_addr
</UL>

<P><STRONG><a name="[159]"></a>IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bsp_io_i2c.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scanf_addr
</UL>

<P><STRONG><a name="[30a]"></a>Key1_Long_Press</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bsp_key.o(i.Key1_Long_Press))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
</UL>

<P><STRONG><a name="[15a]"></a>Key1_State</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_key.o(i.Key1_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key1_State &rArr; Key1_is_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_is_Press
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
</UL>

<P><STRONG><a name="[da]"></a>Key_GPIO_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_key.o(i.Key_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Key_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[d8]"></a>LED_GPIO_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp.o(i.LED_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[d9]"></a>LED_SW_GPIO_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp.o(i.LED_SW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_SW_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[e2]"></a>MOTOR_GPIO_Init</STRONG> (Thumb, 86 bytes, Stack size 128 bytes, bsp_motor.o(i.MOTOR_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MOTOR_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[ee]"></a>MPU9250_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_mpu9250.o(i.MPU9250_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MPU9250_Init &rArr; MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Delay_ms
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
</UL>

<P><STRONG><a name="[160]"></a>MPU9250_Read_Data_Handle</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_mpu9250.o(i.MPU9250_Read_Data_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MPU9250_Read_Data_Handle &rArr; get_attitude_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Magnetometer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
</UL>

<P><STRONG><a name="[164]"></a>MPU9250_Send_Attitude_Data</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, bsp_mpu9250.o(i.MPU9250_Send_Attitude_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU9250_Send_Attitude_Data &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Yaw_Now
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Roll_Now
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Pitch_Now
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
</UL>

<P><STRONG><a name="[167]"></a>MPU9250_Send_Raw_Data</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, bsp_mpu9250.o(i.MPU9250_Send_Raw_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU9250_Send_Raw_Data &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
</UL>

<P><STRONG><a name="[ea]"></a>MPU_ADDR_CTRL</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_mpu9250.o(i.MPU_ADDR_CTRL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_ADDR_CTRL &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MPU_Scanf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[15f]"></a>MPU_Delay_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_mpu9250.o(i.MPU_Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Delay_ms &rArr; App_Delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FreeRTOS_Enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[161]"></a>MPU_Get_Accelerometer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_mpu9250.o(i.MPU_Get_Accelerometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MPU_Get_Accelerometer &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Read_Data_Handle
</UL>

<P><STRONG><a name="[15e]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, bsp_mpu9250.o(i.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Read_Data_Handle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[162]"></a>MPU_Get_Magnetometer</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bsp_mpu9250.o(i.MPU_Get_Magnetometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MPU_Get_Magnetometer &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Read_Data_Handle
</UL>

<P><STRONG><a name="[166]"></a>MPU_Get_Pitch_Now</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_mpu9250.o(i.MPU_Get_Pitch_Now))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
</UL>

<P><STRONG><a name="[165]"></a>MPU_Get_Roll_Now</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_mpu9250.o(i.MPU_Get_Roll_Now))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
</UL>

<P><STRONG><a name="[a4]"></a>MPU_Get_Yaw_Now</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_mpu9250.o(i.MPU_Get_Yaw_Now))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Clear_Yaw
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[16d]"></a>MPU_IIC_Ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_IIC_Ack &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[e9]"></a>MPU_IIC_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MPU_IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MPU_Scanf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[16f]"></a>MPU_IIC_NAck</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[170]"></a>MPU_IIC_Read_Byte</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bsp_mpuiic.o(i.MPU_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[171]"></a>MPU_IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_mpuiic.o(i.MPU_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU_IIC_Send_Byte &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[172]"></a>MPU_IIC_Start</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_IIC_Start &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[173]"></a>MPU_IIC_Stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_mpuiic.o(i.MPU_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[174]"></a>MPU_IIC_Wait_Ack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>

<P><STRONG><a name="[ec]"></a>MPU_Read_Byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MPU_Read_Byte &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MPU_Scanf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[16c]"></a>MPU_Read_Len</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bsp_mpuiic.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Magnetometer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Accelerometer
</UL>

<P><STRONG><a name="[169]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_mpu9250.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[168]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_mpu9250.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[175]"></a>MPU_Set_LPF</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bsp_mpu9250.o(i.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[16a]"></a>MPU_Set_Rate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_mpu9250.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[eb]"></a>MPU_Write_Byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_mpuiic.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MPU_Scanf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Magnetometer
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
</UL>

<P><STRONG><a name="[7d]"></a>Math_Limit_int</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_math.o(i.Math_Limit_int))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>

<P><STRONG><a name="[176]"></a>Mecanum_Ctrl</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, app_mecanum.o(i.Mecanum_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Mecanum_Ctrl &rArr; Motion_Stop &rArr; Motion_Set_Speed &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_APB
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_State
</UL>

<P><STRONG><a name="[177]"></a>Mecanum_State</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, app_mecanum.o(i.Mecanum_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Mecanum_State &rArr; Mecanum_Ctrl &rArr; Motion_Stop &rArr; Motion_Set_Speed &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl_State
</UL>

<P><STRONG><a name="[178]"></a>Mecanum_Yaw_Calc</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, app_mecanum.o(i.Mecanum_Yaw_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Mecanum_Yaw_Calc &rArr; PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Calc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Yaw_Calc
</UL>

<P><STRONG><a name="[17b]"></a>Motion_Ctrl</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, app_motion.o(i.Motion_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Motion_Ctrl &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[17c]"></a>Motion_Ctrl_State</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app_motion.o(i.Motion_Ctrl_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_State
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_State
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_State
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[13d]"></a>Motion_Get_APB</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, app_motion.o(i.Motion_Get_APB))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[be]"></a>Motion_Get_Car_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_motion.o(i.Motion_Get_Car_Type))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Update_Count
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Get_Over_Voltage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Get_Low_Voltage
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Check_Voltage
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ignore_Dead_Zone
</UL>

<P><STRONG><a name="[180]"></a>Motion_Get_Circle_MM</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app_motion.o(i.Motion_Get_Circle_MM))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[17d]"></a>Motion_Get_Encoder</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_motion.o(i.Motion_Get_Encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motion_Get_Encoder
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Get_ALL
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[30b]"></a>Motion_Get_Motor_Speed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_motion.o(i.Motion_Get_Motor_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[17f]"></a>Motion_Get_Speed</STRONG> (Thumb, 752 bytes, Stack size 56 bytes, app_motion.o(i.Motion_Get_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Motion_Get_Speed &rArr; Motion_Yaw_Calc &rArr; Mecanum_Yaw_Calc &rArr; PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Yaw_Now
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Yaw_Now
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc_Motor
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Get_Steer_Angle
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Yaw_Calc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Encoder
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Circle_MM
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_APB
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Circle_Pulse
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Handle
</UL>

<P><STRONG><a name="[186]"></a>Motion_Handle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, app_motion.o(i.Motion_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Motion_Handle &rArr; Motion_Get_Speed &rArr; Motion_Yaw_Calc &rArr; Mecanum_Yaw_Calc &rArr; PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Pwm
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
</UL>

<P><STRONG><a name="[188]"></a>Motion_Send_Car_Type</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_motion.o(i.Motion_Send_Car_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motion_Send_Car_Type &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[189]"></a>Motion_Send_Data</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, app_motion.o(i.Motion_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Motion_Send_Data &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Voltage_Z10
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[123]"></a>Motion_Set_Car_Type</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_motion.o(i.Motion_Set_Car_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motion_Set_Car_Type
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Get_Default_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CarType_Init
</UL>

<P><STRONG><a name="[187]"></a>Motion_Set_Pwm</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_motion.o(i.Motion_Set_Pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motion_Set_Pwm &rArr; Motor_Set_Pwm &rArr; Motor_Ignore_Dead_Zone
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_Pwm
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[83]"></a>Motion_Set_Speed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_motion.o(i.Motion_Set_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Motion_Set_Speed &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Set_Motor_Target
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Yaw_Calc
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>

<P><STRONG><a name="[8d]"></a>Motion_Set_Yaw_Adjust</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_motion.o(i.Motion_Set_Yaw_Adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motion_Set_Yaw_Adjust
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Yaw_Now
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Yaw_Now
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_State
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_State
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_State
</UL>

<P><STRONG><a name="[84]"></a>Motion_Stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_motion.o(i.Motion_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motion_Stop &rArr; Motion_Set_Speed &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Clear_Motor
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Test_Mode_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_State
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_State
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_State
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>

<P><STRONG><a name="[184]"></a>Motion_Yaw_Calc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_motion.o(i.Motion_Yaw_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Motion_Yaw_Calc &rArr; Mecanum_Yaw_Calc &rArr; PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Yaw_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[e3]"></a>Motor_PWM_Init</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, bsp_motor.o(i.Motor_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Motor_PWM_Init &rArr; GPIO_PinRemapConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[18b]"></a>Motor_Set_Pwm</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, bsp_motor.o(i.Motor_Set_Pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Set_Pwm &rArr; Motor_Ignore_Dead_Zone
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ignore_Dead_Zone
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Pwm
</UL>

<P><STRONG><a name="[18f]"></a>Motor_Stop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_motor.o(i.Motor_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>

<P><STRONG><a name="[fc]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_NVIC_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Config
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[19c]"></a>OLED_Clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_oled.o(i.OLED_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_String
</UL>

<P><STRONG><a name="[c5]"></a>OLED_Draw_Line</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_oled.o(i.OLED_Draw_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_String
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_YAW
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Voltage
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_UART_Servo_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Test_Mode_Error
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Test_Mode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Motor_Speed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Error
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_CarType
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Waiting
</UL>

<P><STRONG><a name="[19e]"></a>OLED_Draw_String</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, app_oled.o(i.OLED_Draw_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Puts
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
</UL>

<P><STRONG><a name="[1a1]"></a>OLED_Refresh</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_oled.o(i.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_UpdateScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_String
</UL>

<P><STRONG><a name="[1a3]"></a>OLED_Show_CarType</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, app_oled.o(i.OLED_Show_CarType))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_Show_CarType &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[ae]"></a>OLED_Show_Error</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_oled.o(i.OLED_Show_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_Show_Error &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
</UL>

<P><STRONG><a name="[1a5]"></a>OLED_Show_Motor_Speed</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, app_oled.o(i.OLED_Show_Motor_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OLED_Show_Motor_Speed &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[bc]"></a>OLED_Show_Test_Mode</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, app_oled.o(i.OLED_Show_Test_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_Show_Test_Mode &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Test_Mode_Init
</UL>

<P><STRONG><a name="[1a6]"></a>OLED_Show_Test_Mode_Error</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_oled.o(i.OLED_Show_Test_Mode_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Show_Test_Mode_Error &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[1a7]"></a>OLED_Show_UART_Servo_Read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, app_oled.o(i.OLED_Show_UART_Servo_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Show_UART_Servo_Read &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[1a8]"></a>OLED_Show_Voltage</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, app_oled.o(i.OLED_Show_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Show_Voltage &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[df]"></a>OLED_Show_Waiting</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, app_oled.o(i.OLED_Show_Waiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Show_Waiting &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[1a9]"></a>OLED_Show_YAW</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, app_oled.o(i.OLED_Show_YAW))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Show_YAW &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_Line
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[185]"></a>PID_Calc_Motor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_pid.o(i.PID_Calc_Motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PID_Calc_Motor &rArr; PID_Incre_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Incre_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[18e]"></a>PID_Clear_Motor</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_pid.o(i.PID_Clear_Motor))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
</UL>

<P><STRONG><a name="[1aa]"></a>PID_Incre_Calc</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, app_pid.o(i.PID_Incre_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PID_Incre_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Calc_Motor
</UL>

<P><STRONG><a name="[a9]"></a>PID_Param_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_pid.o(i.PID_Param_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PID_Param_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[1ab]"></a>PID_Send_Parm_Active</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, app_pid.o(i.PID_Send_Parm_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PID_Send_Parm_Active &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[12b]"></a>PID_Set_Motor_Parm</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, app_pid.o(i.PID_Set_Motor_Parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PID_Set_Motor_Parm
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
</UL>

<P><STRONG><a name="[18c]"></a>PID_Set_Motor_Target</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_pid.o(i.PID_Set_Motor_Target))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Speed
</UL>

<P><STRONG><a name="[140]"></a>PID_Yaw_Calc</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, app_pid.o(i.PID_Yaw_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Yaw_Calc
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Yaw_Calc
</UL>

<P><STRONG><a name="[18d]"></a>PID_Yaw_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_pid.o(i.PID_Yaw_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Yaw_Adjust
</UL>

<P><STRONG><a name="[12e]"></a>PID_Yaw_Set_Parm</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_pid.o(i.PID_Yaw_Set_Parm))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
</UL>

<P><STRONG><a name="[1d7]"></a>PwmServo_Handle</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bsp_pwmservo.o(i.PwmServo_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PwmServo_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>PwmServo_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, bsp_pwmservo.o(i.PwmServo_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PwmServo_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[8a]"></a>PwmServo_Set_Angle</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_pwmservo.o(i.PwmServo_Set_Angle))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Car_Type
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Set_Default_Angle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[1f9]"></a>PwmServo_Set_Angle_All</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, bsp_pwmservo.o(i.PwmServo_Set_Angle_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PwmServo_Set_Angle_All
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[9a]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1af]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DMA_Init
</UL>

<P><STRONG><a name="[f9]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Spi_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[f7]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[99]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ADDR_CTRL
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_GPIO_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SW_GPIO_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GPIO_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_gpio_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Config
</UL>

<P><STRONG><a name="[7b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[1ef]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1fb]"></a>RGB_Clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_rgb.o(i.RGB_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
</UL>

<P><STRONG><a name="[e1]"></a>RGB_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_rgb.o(i.RGB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RGB_Init &rArr; RGB_Driver_Init &rArr; RGB_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_GPIO_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Driver_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[c8]"></a>RGB_Set_Color</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bsp_rgb.o(i.RGB_Set_Color))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_battery_84V
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_battery_126V
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_starbright
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_breathing
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rbg_gradient
</UL>

<P><STRONG><a name="[21f]"></a>RGB_Set_Color_U32</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_rgb.o(i.RGB_Set_Color_U32))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_waterfall
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_marquee
</UL>

<P><STRONG><a name="[c9]"></a>RGB_Update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bsp_rgb.o(i.RGB_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_waterfall
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_starbright
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_marquee
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_breathing
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rbg_gradient
</UL>

<P><STRONG><a name="[1bd]"></a>Request_Data</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, protocol.o(i.Request_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Request_Data &rArr; UartServo_Get_Angle &rArr; USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Read_State
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Angle
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Clear_Flag
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Clear_Arm_Read_Vlaue
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[1c2]"></a>SBUS_Handle</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, app_sbus.o(i.SBUS_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SBUS_Handle &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Parse_Data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mecanum_Ctrl
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fourwheel_Ctrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[1c3]"></a>SBUS_Parse_Data</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, app_sbus.o(i.SBUS_Parse_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SBUS_Parse_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
</UL>

<P><STRONG><a name="[1c4]"></a>SBUS_Reveive</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_sbus.o(i.SBUS_Reveive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SBUS_Reveive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>SPI2_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bsp_spi.o(i.SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI2_Init &rArr; Spi_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
</UL>

<P><STRONG><a name="[1c7]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bsp_spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
</UL>

<P><STRONG><a name="[1b7]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_CalculateCRC))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Spi_Init
</UL>

<P><STRONG><a name="[1b6]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Spi_Init
</UL>

<P><STRONG><a name="[1b8]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Spi_Init
</UL>

<P><STRONG><a name="[1c8]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[1ca]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[1c9]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[1b5]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Spi_Init
</UL>

<P><STRONG><a name="[1cd]"></a>SSD1306_DrawPixel</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, bsp_ssd1306.o(i.SSD1306_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SSD1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Putc
</UL>

<P><STRONG><a name="[19d]"></a>SSD1306_Fill</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_ssd1306.o(i.SSD1306_Fill))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[19f]"></a>SSD1306_GotoXY</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_ssd1306.o(i.SSD1306_GotoXY))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_String
</UL>

<P><STRONG><a name="[de]"></a>SSD1306_Init</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, bsp_ssd1306.o(i.SSD1306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SSD1306_Init &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_UpdateScreen
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Fill
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[1cc]"></a>SSD1306_Putc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, bsp_ssd1306.o(i.SSD1306_Putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SSD1306_Putc &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Puts
</UL>

<P><STRONG><a name="[1a0]"></a>SSD1306_Puts</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_ssd1306.o(i.SSD1306_Puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SSD1306_Puts &rArr; SSD1306_Putc &rArr; SSD1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Putc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Draw_String
</UL>

<P><STRONG><a name="[1a2]"></a>SSD1306_UpdateScreen</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_ssd1306.o(i.SSD1306_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_I2C_WriteMulti
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[1cf]"></a>Send_Request_Data</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, protocol.o(i.Send_Request_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Send_Request_Data &rArr; UartServo_Rx_Parse &rArr; UartServo_Verify_Offset &rArr; Flash_Set_ARM_Median_Value &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_Offset_State
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle_Array
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Read_State
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Angle
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Send_Parm_Active
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Send_Data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Send_Car_Type
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Send_Version
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Send_Default_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[120]"></a>Set_Auto_Report</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app.o(i.Set_Auto_Report))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Auto_Report_Init
</UL>

<P><STRONG><a name="[22c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[302]"></a>System_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_bat.o(i.System_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Auto_Report
</UL>

<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM7_IRQHandler &rArr; PwmServo_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>TIM7_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bsp_timer.o(i.TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM7_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[110]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[1d6]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[197]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[191]"></a>TIM_DeInit</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[10d]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_EncoderInterfaceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[1d5]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>TIM_ICInit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[10e]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[111]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[193]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[194]"></a>TIM_OC2Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[195]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[196]"></a>TIM_OC4Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[192]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
</UL>

<P><STRONG><a name="[198]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
</UL>

<P><STRONG><a name="[199]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
</UL>

<P><STRONG><a name="[19a]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
</UL>

<P><STRONG><a name="[19b]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
</UL>

<P><STRONG><a name="[112]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[1db]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1dd]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1df]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1d9]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[10c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[10b]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM5
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM4
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init_TIM2
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; Upper_Data_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Receive
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>USART1_Init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, bsp_usart.o(i.USART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART1_Init &rArr; USART1_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[88]"></a>USART1_Send_ArrayU8</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, bsp_usart.o(i.USART1_Send_ArrayU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Raw_Data
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Raw_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Attitude_Data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Send_Count_Now
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Send_Version
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_Offset_State
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle_Array
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Send_Parm_Active
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Send_Data
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Send_Car_Type
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Send_Default_Angle
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; SBUS_Reveive &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Reveive
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>USART2_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, bsp_usart.o(i.USART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Revice
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>USART3_Init</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, bsp_usart.o(i.USART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART3_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[1ec]"></a>USART3_Send_ArrayU8</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_usart.o(i.USART3_Send_ArrayU8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_U8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Sync_Write
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Torque
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_ID
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Angle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Ctrl
</UL>

<P><STRONG><a name="[1ed]"></a>USART3_Send_U8</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(i.USART3_Send_U8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_ArrayU8
</UL>

<P><STRONG><a name="[1e8]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[1e7]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[1e1]"></a>USART_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
</UL>

<P><STRONG><a name="[1ea]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_U8
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>USART_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>USART_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[1e5]"></a>USART_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[1e3]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1ee]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_U8
</UL>

<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_can.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN_Parse_Data &rArr; Upper_CAN_Execute_Command &rArr; Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FreeRTOS_Enable
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_Data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Parse_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>UartServo_Clear_Arm_Read_Vlaue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_uart_servo.o(i.UartServo_Clear_Arm_Read_Vlaue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartServo_Clear_Arm_Read_Vlaue
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Median_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>

<P><STRONG><a name="[1be]"></a>UartServo_Clear_Flag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Clear_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>

<P><STRONG><a name="[bb]"></a>UartServo_Ctrl</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, app_uart_servo.o(i.UartServo_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartServo_Ctrl &rArr; USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_ArrayU8
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Median_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Test_Mode_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[1c0]"></a>UartServo_Get_Angle</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_uart_servo.o(i.UartServo_Get_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartServo_Get_Angle &rArr; USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>

<P><STRONG><a name="[1f1]"></a>UartServo_Get_Flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Get_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
</UL>

<P><STRONG><a name="[1f0]"></a>UartServo_Get_Median_Offset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Get_Median_Offset))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Snyc_Buffer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle_Array
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Ctrl
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Clear_Arm_Read_Vlaue
</UL>

<P><STRONG><a name="[1d0]"></a>UartServo_Get_Read_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Get_Read_State))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[1eb]"></a>UartServo_Revice</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, app_uart_servo.o(i.UartServo_Revice))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UartServo_Revice
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1d2]"></a>UartServo_Rx_Parse</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_uart_servo.o(i.UartServo_Rx_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UartServo_Rx_Parse &rArr; UartServo_Verify_Offset &rArr; Flash_Set_ARM_Median_Value &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Verify_Offset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Flag
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_TestMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Read_State
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Clear_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[1f2]"></a>UartServo_Send_ARM_Angle</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, app_uart_servo.o(i.UartServo_Send_ARM_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UartServo_Send_ARM_Angle &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Median_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
</UL>

<P><STRONG><a name="[1d3]"></a>UartServo_Send_ARM_Angle_Array</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, app_uart_servo.o(i.UartServo_Send_ARM_Angle_Array))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartServo_Send_ARM_Angle_Array &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Median_Offset
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Read_State
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[1d1]"></a>UartServo_Send_Offset_State</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_uart_servo.o(i.UartServo_Send_Offset_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartServo_Send_Offset_State &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_ArrayU8
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Read_State
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Verify_Offset
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
</UL>

<P><STRONG><a name="[1f5]"></a>UartServo_Set_ID</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, app_uart_servo.o(i.UartServo_Set_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartServo_Set_ID &rArr; USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[11d]"></a>UartServo_Set_Median_Value</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Set_Median_Value))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_ARM_Median_Value
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_ARM_Median_Value
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ARM_Mid_Offset_Init
</UL>

<P><STRONG><a name="[1bf]"></a>UartServo_Set_Read_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Set_Read_State))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_Offset_State
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_ARM_Angle_Array
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>

<P><STRONG><a name="[1f6]"></a>UartServo_Set_Snyc_Buffer</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_uart_servo.o(i.UartServo_Set_Snyc_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartServo_Set_Snyc_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Get_Median_Offset
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
</UL>

<P><STRONG><a name="[1f7]"></a>UartServo_Set_Torque</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_uart_servo.o(i.UartServo_Set_Torque))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartServo_Set_Torque &rArr; USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[1f8]"></a>UartServo_Sync_Write</STRONG> (Thumb, 356 bytes, Stack size 104 bytes, app_uart_servo.o(i.UartServo_Sync_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UartServo_Sync_Write &rArr; USART3_Send_ArrayU8 &rArr; USART3_Send_U8
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send_ArrayU8
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
</UL>

<P><STRONG><a name="[30c]"></a>UartServo_Test_Read_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_uart_servo.o(i.UartServo_Test_Read_State))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_OLED
</UL>

<P><STRONG><a name="[1f4]"></a>UartServo_Verify_Offset</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, app_uart_servo.o(i.UartServo_Verify_Offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UartServo_Verify_Offset &rArr; Flash_Set_ARM_Median_Value &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_ARM_Median_Value
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Send_Offset_State
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Rx_Parse
</UL>

<P><STRONG><a name="[fe]"></a>Upper_CAN_Execute_Command</STRONG> (Thumb, 916 bytes, Stack size 48 bytes, protocol.o(i.Upper_CAN_Execute_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Upper_CAN_Execute_Command &rArr; Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_effect
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_breathing_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_get_effect
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Torque
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_ID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Ctrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auto_Report
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Clear
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle_All
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Set_Motor_Parm
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Pwm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Car_Type
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl_State
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_CarType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Auto_Report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_RX_Beep
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Set_TestMode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Reset_MCU
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Test_Mode_Init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Set_OLED_Flag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Clear_Yaw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Set_Default_Angle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Parse_Data
</UL>

<P><STRONG><a name="[1ff]"></a>Upper_Data_Parse</STRONG> (Thumb, 1252 bytes, Stack size 48 bytes, protocol.o(i.Upper_Data_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Upper_Data_Parse &rArr; Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_effect
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_breathing_color
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_get_effect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Sync_Write
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Torque
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Snyc_Buffer
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Read_State
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_ID
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Ctrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auto_Report
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Clear
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle_All
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmServo_Set_Angle
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Set_Parm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Set_Motor_Parm
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Pwm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Car_Type
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl_State
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Yaw_PID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_CarType
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Auto_Report
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_ARM_Median_Value
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Reset_MCU
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Set_Default_Angle
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[200]"></a>Upper_Data_Parse_Low_Battery</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, protocol.o(i.Upper_Data_Parse_Low_Battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Upper_Data_Parse_Low_Battery &rArr; Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_effect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Clear
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Set_Motor_Parm
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Car_Type
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Ctrl_State
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_CarType
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Reset_MCU
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Request_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Control
</UL>

<P><STRONG><a name="[1e4]"></a>Upper_Data_Receive</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, protocol.o(i.Upper_Data_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Upper_Data_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32a]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ad]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_ARM_Median_Value
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Reset_MCU
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Start_FreeRTOS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Reset_State
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_CarType
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Auto_Report
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_AKM_Angle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_scanf_addr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_imu_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Basic_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[32b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[32c]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[203]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32d]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_YAW
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Voltage
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_UART_Servo_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Test_Mode_Error
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Test_Mode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Motor_Speed
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Error
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_CarType
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Waiting
</UL>

<P><STRONG><a name="[32e]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[32f]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[207]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[228]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
</UL>

<P><STRONG><a name="[204]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[205]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[206]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[209]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[20a]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[20b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[208]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
</UL>

<P><STRONG><a name="[20c]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
</UL>

<P><STRONG><a name="[20d]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[20e]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
</UL>

<P><STRONG><a name="[20f]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[330]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[331]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[332]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[221]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[b3]"></a>app_rgb_effects_handle</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app_rgb.o(i.app_rgb_effects_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_rgb_effects_handle &rArr; app_rgb_waterfall &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_waterfall
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_starbright
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_marquee
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_breathing
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rbg_gradient
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Loop
</UL>

<P><STRONG><a name="[1fa]"></a>app_rgb_get_effect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_rgb.o(i.app_rgb_get_effect))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[aa]"></a>app_rgb_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_rgb.o(i.app_rgb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_rgb_init &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
</UL>

<P><STRONG><a name="[1fc]"></a>app_rgb_set_breathing_color</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_rgb.o(i.app_rgb_set_breathing_color))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[c7]"></a>app_rgb_set_effect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_rgb.o(i.app_rgb_set_effect))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Key
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>

<P><STRONG><a name="[220]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[223]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[224]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
</UL>

<P><STRONG><a name="[225]"></a>atan2_q15</STRONG> (Thumb, 212 bytes, Stack size 28 bytes, ml_math_func.o(i.atan2_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan2_q15 &rArr; reciprocal_fun_q15 &rArr; inverse_sqrt_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocal_fun_q15
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[85]"></a>atanf</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, atanf.o(i.atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = atanf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>

<P><STRONG><a name="[22b]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[d2]"></a>delay_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[db]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bsp.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Long_Beep_Alarm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MPU_Scanf
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Delay_ms
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
</UL>

<P><STRONG><a name="[2e9]"></a>delay_us</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_100us
</UL>

<P><STRONG><a name="[25e]"></a>dmp_get_6quaternion</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_6quaternion))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[264]"></a>dmp_get_9quaternion</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_9quaternion))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[252]"></a>dmp_get_accel</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_accel))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[26a]"></a>dmp_get_bac_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_bac_state))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[26b]"></a>dmp_get_bac_ts</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_bac_ts))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[25b]"></a>dmp_get_calibrated_compass</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_calibrated_compass))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[22e]"></a>dmp_get_fifo_length</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_fifo_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dmp_get_fifo_length &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[26c]"></a>dmp_get_flip_pickup_state</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_flip_pickup_state))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[267]"></a>dmp_get_gmrvquaternion</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_gmrvquaternion))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[258]"></a>dmp_get_gyro_bias</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_gyro_bias))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[231]"></a>dmp_get_pedometer_get_all_steps</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_get_pedometer_get_all_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_get_pedometer_get_all_steps &rArr; dmp_get_pedometer_num_of_steps_20648 &rArr; inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps_20648
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[233]"></a>dmp_get_pedometer_num_of_steps</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, inv_mems_interface_mapping.o(i.dmp_get_pedometer_num_of_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmp_get_pedometer_num_of_steps &rArr; dmp_get_pedometer_get_all_steps &rArr; dmp_get_pedometer_num_of_steps_20648 &rArr; inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_get_all_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[232]"></a>dmp_get_pedometer_num_of_steps_20648</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_get_pedometer_num_of_steps_20648))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dmp_get_pedometer_num_of_steps_20648 &rArr; inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_read_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_get_all_steps
</UL>

<P><STRONG><a name="[25d]"></a>dmp_get_raw_compass</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_raw_compass))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[256]"></a>dmp_get_raw_gyro</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_raw_gyro))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[22f]"></a>dmp_read_fifo</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dmp_read_fifo &rArr; dmp_reset_fifo &rArr; mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[2b2]"></a>dmp_reset_control_registers</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_reset_control_registers))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[235]"></a>dmp_reset_control_registers_20648</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_reset_control_registers_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>

<P><STRONG><a name="[151]"></a>dmp_reset_fifo</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.dmp_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dmp_reset_fifo &rArr; mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_FIFO_RST_Diamond
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>

<P><STRONG><a name="[2ce]"></a>dmp_reset_odr_counters</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_reset_odr_counters))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
</UL>

<P><STRONG><a name="[239]"></a>dmp_reset_odr_counters_20648</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_reset_odr_counters_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>

<P><STRONG><a name="[299]"></a>dmp_reset_pickup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_reset_pickup))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[2b3]"></a>dmp_set_FIFO_watermark</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_FIFO_watermark))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[23a]"></a>dmp_set_FIFO_watermark_20648</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_FIFO_watermark_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[2d4]"></a>dmp_set_accel_cal_params</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_cal_params))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_cal_params
</UL>

<P><STRONG><a name="[23c]"></a>dmp_set_accel_cal_params_20648</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, dmp3default_20648.o(i.dmp_set_accel_cal_params_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[2d9]"></a>dmp_set_accel_feedback_gain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_feedback_gain))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_quaternion_gain
</UL>

<P><STRONG><a name="[23e]"></a>dmp_set_accel_feedback_gain_20648</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_accel_feedback_gain_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[2d6]"></a>dmp_set_accel_fsr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
</UL>

<P><STRONG><a name="[23f]"></a>dmp_set_accel_fsr_20648</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_accel_fsr_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[2d7]"></a>dmp_set_accel_scale2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_accel_scale2))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
</UL>

<P><STRONG><a name="[240]"></a>dmp_set_accel_scale2_20648</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_accel_scale2_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[2e3]"></a>dmp_set_bac_rate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_bac_rate))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[241]"></a>dmp_set_bac_rate_20648</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_bac_rate_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[150]"></a>dmp_set_bias</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_bias))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
</UL>

<P><STRONG><a name="[242]"></a>dmp_set_bias_20648</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_bias_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[275]"></a>dmp_set_compass_matrix</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_compass_matrix))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_dmp_cal
</UL>

<P><STRONG><a name="[243]"></a>dmp_set_compass_matrix_20648</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_compass_matrix_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[29c]"></a>dmp_set_data_interrupt_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_interrupt_control))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[244]"></a>dmp_set_data_interrupt_control_20648</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_data_interrupt_control_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[29b]"></a>dmp_set_data_output_control1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_output_control1))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[245]"></a>dmp_set_data_output_control1_20648</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_data_output_control1_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>

<P><STRONG><a name="[29d]"></a>dmp_set_data_output_control2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_output_control2))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[246]"></a>dmp_set_data_output_control2_20648</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dmp3default_20648.o(i.dmp_set_data_output_control2_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>

<P><STRONG><a name="[2a4]"></a>dmp_set_data_rdy_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_data_rdy_status))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[247]"></a>dmp_set_data_rdy_status_20648</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_data_rdy_status_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[2e0]"></a>dmp_set_gyro_sf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_gyro_sf))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
</UL>

<P><STRONG><a name="[248]"></a>dmp_set_gyro_sf_20648</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_gyro_sf_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[29e]"></a>dmp_set_motion_event_control</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_motion_event_control))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[249]"></a>dmp_set_motion_event_control_20648</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dmp3default_20648.o(i.dmp_set_motion_event_control_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
</UL>

<P><STRONG><a name="[103]"></a>dmp_set_sensor_rate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_sensor_rate))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DividerRateSet
</UL>

<P><STRONG><a name="[24a]"></a>dmp_set_sensor_rate_20648</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dmp3default_20648.o(i.dmp_set_sensor_rate_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[28a]"></a>dmp_set_tilt_enable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.dmp_set_tilt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_tilt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_activity_classifier
</UL>

<P><STRONG><a name="[147]"></a>fifo_handler</STRONG> (Thumb, 1250 bytes, Stack size 264 bytes, icm20948.o(i.fifo_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = fifo_handler &rArr; process_sensor_output &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_swmirror
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_dmp_get_calibrated_gyro
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_linearacceleration
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_gravity
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_identify_interrupt
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_tick_count
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_rv_accuracy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_mag_accuracy
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_fullscale
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_accuracy
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gmrv_accuracy
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_fullscale
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_accuracy
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_raw_gyro
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_raw_compass
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_gyro_bias
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_gmrvquaternion
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_flip_pickup_state
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_calibrated_compass
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_bac_ts
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_bac_state
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_accel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_9quaternion
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_6quaternion
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q16_to_float
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Read_Data_Handle
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[163]"></a>get_attitude_angle</STRONG> (Thumb, 1126 bytes, Stack size 120 bytes, app_angle.o(i.get_attitude_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_attitude_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;q_rsqrt
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Read_Data_Handle
</UL>

<P><STRONG><a name="[300]"></a>get_highest_bit_position</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ml_math_func.o(i.get_highest_bit_position))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_limits_and_scale
</UL>

<P><STRONG><a name="[2ae]"></a>get_tick_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, icm20948.o(i.get_tick_count))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_tick_count
</UL>

<P><STRONG><a name="[105]"></a>gyro_data_ready_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icm20948.o(i.gyro_data_ready_cb))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[272]"></a>i2cWrite</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bsp_io_i2c.o(i.i2cWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_I2C_WriteMulti
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_I2C_Write
</UL>

<P><STRONG><a name="[dd]"></a>i2c_scanf_addr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_io_i2c.o(i.i2c_scanf_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_scanf_addr &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[17a]"></a>inv_androidSensor_enabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.inv_androidSensor_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_update_odr
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_set_odr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_activity_classifier
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyCompass
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
</UL>

<P><STRONG><a name="[27d]"></a>inv_apply_raw_compass_matrix</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, inv_mems_slave_compass.o(i.inv_apply_raw_compass_matrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_apply_raw_compass_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[273]"></a>inv_compass_dmp_cal</STRONG> (Thumb, 338 bytes, Stack size 136 bytes, inv_mems_slave_compass.o(i.inv_compass_dmp_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_compass_dmp_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[268]"></a>inv_compute_scalar_part</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ml_math_func.o(i.inv_compute_scalar_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_gravity
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[255]"></a>inv_convert_dmp3_to_body</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, inv_mems_data_converter.o(i.inv_convert_dmp3_to_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = inv_convert_dmp3_to_body &rArr; inv_q_rotate &rArr; inv_q_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[25f]"></a>inv_convert_rotation_vector</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, inv_mems_data_converter.o(i.inv_convert_rotation_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_convert_rotation_vector &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult_q_qi
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[260]"></a>inv_convert_rotation_vector_1</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, inv_mems_data_converter.o(i.inv_convert_rotation_vector_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inv_convert_rotation_vector_1 &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult_q_qi
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sensor_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[27c]"></a>inv_decode_3_16bit_elements</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_decode_3_16bit_elements))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[27e]"></a>inv_decode_3_32bit_elements</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, inv_mems_mpu_fifo_control.o(i.inv_decode_3_32bit_elements))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_decode_3_32bit_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
</UL>

<P><STRONG><a name="[27b]"></a>inv_decode_one_ivory_fifo_packet</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.inv_decode_one_ivory_fifo_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inv_decode_one_ivory_fifo_packet &rArr; inv_apply_raw_compass_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_apply_raw_compass_matrix
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_3_32bit_elements
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_3_16bit_elements
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
</UL>

<P><STRONG><a name="[23b]"></a>inv_dmpdriver_int16_to_big8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_int16_to_big8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_int16_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate_20648
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status_20648
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control_20648
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark_20648
</UL>

<P><STRONG><a name="[23d]"></a>inv_dmpdriver_int32_to_big8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_int32_to_big8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_int32_to_big8
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf_20648
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix_20648
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias_20648
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2_20648
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr_20648
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain_20648
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
</UL>

<P><STRONG><a name="[281]"></a>inv_dmpdriver_mems_firmware_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_mems_firmware_load), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_load_firmware_20648
</UL>

<P><STRONG><a name="[234]"></a>inv_dmpdriver_read_mems</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_read_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_dmpdriver_read_mems &rArr; inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_num_of_steps_20648
</UL>

<P><STRONG><a name="[236]"></a>inv_dmpdriver_write_mems</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_dmpdriver_write_mems), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate_20648
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_motion_event_control_20648
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf_20648
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status_20648
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control2_20648
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control1_20648
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control_20648
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_compass_matrix_20648
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias_20648
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate_20648
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2_20648
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr_20648
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain_20648
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params_20648
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark_20648
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_odr_counters_20648
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_control_registers_20648
</UL>

<P><STRONG><a name="[289]"></a>inv_enable_activity_classifier</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.inv_enable_activity_classifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_enable_activity_classifier
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tilt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[28b]"></a>inv_enable_mems_hw_sensors</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_enable_mems_hw_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = inv_enable_mems_hw_sensors &rArr; inv_mems_pressure_resume_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[152]"></a>inv_enable_sensor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.inv_enable_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = inv_enable_sensor &rArr; inv_enable_sensor_internal &rArr; inv_enable_mems_hw_sensors &rArr; inv_mems_pressure_resume_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_prevent_lpen_control
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_pressure_availability
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_compass_availability
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_pressure
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_compass
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[29a]"></a>inv_enable_tilt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.inv_enable_tilt))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tilt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[2a6]"></a>inv_execute_read_secondary</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, inv_mems_secondary_transport.o(i.inv_execute_read_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
</UL>

<P><STRONG><a name="[2ab]"></a>inv_execute_write_secondary</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, inv_mems_secondary_transport.o(i.inv_execute_write_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[276]"></a>inv_fast_sqrt</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ml_math_func.o(i.inv_fast_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_limits_and_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
</UL>

<P><STRONG><a name="[253]"></a>inv_get_accel_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_accel_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[2e2]"></a>inv_get_accel_divider</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_accel_divider))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[254]"></a>inv_get_accel_fullscale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_accel_fullscale))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[22a]"></a>inv_get_batch_mode_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.inv_get_batch_mode_status))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>

<P><STRONG><a name="[2ca]"></a>inv_get_chip_power_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_chip_power_state))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
</UL>

<P><STRONG><a name="[2de]"></a>inv_get_dmp_start_address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_get_dmp_start_address))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
</UL>

<P><STRONG><a name="[333]"></a>inv_get_dmp_start_address_20648</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dmp3default_20648.o(i.inv_get_dmp_start_address_20648), UNUSED)

<P><STRONG><a name="[269]"></a>inv_get_gmrv_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_gmrv_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[25a]"></a>inv_get_gyro_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_gyro_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[2a1]"></a>inv_get_gyro_divider</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_gyro_divider))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[257]"></a>inv_get_gyro_fullscale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_get_gyro_fullscale))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[25c]"></a>inv_get_mag_accuracy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_mag_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[265]"></a>inv_get_rv_accuracy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.inv_get_rv_accuracy))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[24f]"></a>inv_get_tick_count</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, inv_mems_drv_hook.o(i.inv_get_tick_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_get_tick_count
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick_count
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[24e]"></a>inv_identify_interrupt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.inv_identify_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_identify_interrupt &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[2af]"></a>inv_init_secondary</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, inv_mems_secondary_transport.o(i.inv_init_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = inv_init_secondary &rArr; inv_mems_secondary_stop_channel &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[14d]"></a>inv_initialize_lower_driver</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, inv_mems_base_driver.o(i.inv_initialize_lower_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = inv_initialize_lower_driver &rArr; inv_set_accel_fullscale &rArr; inv_set_mems_accel_fullscale &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_load_firmware
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_FIFO_watermark
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_control_registers
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_fullscale
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_divider
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_divider
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[27f]"></a>inv_int16_to_big8</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_int16_to_big8), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int16_to_big8
</UL>

<P><STRONG><a name="[280]"></a>inv_int32_to_big8</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_int32_to_big8), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_int32_to_big8
</UL>

<P><STRONG><a name="[2b0]"></a>inv_load_firmware</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_load_firmware))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[2b9]"></a>inv_load_firmware_20648</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dmp3default_20648.o(i.inv_load_firmware_20648), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_mems_firmware_load
</UL>

<P><STRONG><a name="[298]"></a>inv_mems_allow_lpen_control</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_allow_lpen_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_mems_allow_lpen_control &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[261]"></a>inv_mems_augmented_sensors_get_gravity</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_get_gravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_mems_augmented_sensors_get_gravity &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_qfix_mult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[263]"></a>inv_mems_augmented_sensors_get_linearacceleration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_get_linearacceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_mems_augmented_sensors_get_linearacceleration
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[266]"></a>inv_mems_augmented_sensors_get_orientation</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_get_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_mems_augmented_sensors_get_orientation &rArr; inv_compute_scalar_part &rArr; inv_fast_sqrt &rArr; test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_transpose_quaternion_to_rotation
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_qfix_mult
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_q15
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[2bc]"></a>inv_mems_augmented_sensors_set_odr</STRONG> (Thumb, 532 bytes, Stack size 16 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_mems_augmented_sensors_set_odr
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
</UL>

<P><STRONG><a name="[29f]"></a>inv_mems_augmented_sensors_update_odr</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, inv_mems_augmented_sensors.o(i.inv_mems_augmented_sensors_update_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_mems_augmented_sensors_update_odr
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[2bf]"></a>inv_mems_compass_getstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_slave_compass.o(i.inv_mems_compass_getstate))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[259]"></a>inv_mems_dmp_get_calibrated_gyro</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, inv_mems_mpu_fifo_control.o(i.inv_mems_dmp_get_calibrated_gyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_mems_dmp_get_calibrated_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[251]"></a>inv_mems_fifo_pop</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.inv_mems_fifo_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_mems_fifo_pop &rArr; inv_decode_one_ivory_fifo_packet &rArr; inv_apply_raw_compass_matrix
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_decode_one_ivory_fifo_packet
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_size_and_samplecnt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[250]"></a>inv_mems_fifo_swmirror</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.inv_mems_fifo_swmirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_mems_fifo_swmirror &rArr; dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_all
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[282]"></a>inv_mems_firmware_load</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, inv_mems_load_firmware.o(i.inv_mems_firmware_load), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_mems_firmware_load
</UL>

<P><STRONG><a name="[292]"></a>inv_mems_get_compass_availability</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_get_compass_availability))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[294]"></a>inv_mems_get_pressure_availability</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_get_pressure_availability))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[2ea]"></a>inv_mems_pressure_getstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_slave_pressure.o(i.inv_mems_pressure_getstate))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
</UL>

<P><STRONG><a name="[28f]"></a>inv_mems_pressure_resume_bmp</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, inv_mems_slave_pressure.o(i.inv_mems_pressure_resume_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = inv_mems_pressure_resume_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_compass_getstate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_saveI2cOdr
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_restoreI2cOdr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[290]"></a>inv_mems_pressure_suspend_bmp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, inv_mems_slave_pressure.o(i.inv_mems_pressure_suspend_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_mems_pressure_suspend_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_compass_getstate
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[295]"></a>inv_mems_prevent_lpen_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_prevent_lpen_control))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[2c2]"></a>inv_mems_run_selftest</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, inv_mems_mpu_selftest.o(i.inv_mems_run_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_check_accelgyro_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test
</UL>

<P><STRONG><a name="[2a9]"></a>inv_mems_secondary_disable_i2c</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_disable_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_mems_secondary_disable_i2c &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[2a8]"></a>inv_mems_secondary_enable_i2c</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_enable_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_mems_secondary_enable_i2c &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[2c1]"></a>inv_mems_secondary_restoreI2cOdr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_restoreI2cOdr))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[2c0]"></a>inv_mems_secondary_saveI2cOdr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_saveI2cOdr))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
</UL>

<P><STRONG><a name="[2c6]"></a>inv_mems_secondary_set_odr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_mems_secondary_set_odr &rArr; inv_set_secondary_divider &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary_divider
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[2aa]"></a>inv_mems_secondary_stop_channel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inv_mems_secondary_transport.o(i.inv_mems_secondary_stop_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_mems_secondary_stop_channel &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_secondary
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[227]"></a>inv_q15_mult</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q15_mult))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_q15
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocal_fun_q15
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_sqrt_q15
</UL>

<P><STRONG><a name="[2eb]"></a>inv_q29_mult</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q29_mult))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_transpose_quaternion_to_rotation
</UL>

<P><STRONG><a name="[274]"></a>inv_q30_mult</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q30_mult))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult_q_qi
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_dmp_cal
</UL>

<P><STRONG><a name="[2c9]"></a>inv_q_invert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ml_math_func.o(i.inv_q_invert))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
</UL>

<P><STRONG><a name="[2c8]"></a>inv_q_mult</STRONG> (Thumb, 176 bytes, Stack size 12 bytes, ml_math_func.o(i.inv_q_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_q_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_rotate
</UL>

<P><STRONG><a name="[279]"></a>inv_q_rotate</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, ml_math_func.o(i.inv_q_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = inv_q_rotate &rArr; inv_q_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_dmp3_to_body
</UL>

<P><STRONG><a name="[2ba]"></a>inv_qfix_mult</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ml_math_func.o(i.inv_qfix_mult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_qfix_mult
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_gravity
</UL>

<P><STRONG><a name="[278]"></a>inv_reGenerate_sensorControl</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, inv_mems_base_control.o(i.inv_reGenerate_sensorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_reGenerate_sensorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_androidSensor_to_control
</UL>

<P><STRONG><a name="[283]"></a>inv_read_mems</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, inv_mems_transport.o(i.inv_read_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_read_mems &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_read_mems
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>

<P><STRONG><a name="[230]"></a>inv_read_mems_reg</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, inv_mems_transport.o(i.inv_read_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_identify_interrupt
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_FIFO_RST_Diamond
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_accel_fullscale
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[2cc]"></a>inv_read_mems_reg_core</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, inv_mems_transport.o(i.inv_read_mems_reg_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_save_setting
</UL>

<P><STRONG><a name="[2a7]"></a>inv_read_secondary</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, inv_mems_secondary_transport.o(i.inv_read_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>

<P><STRONG><a name="[153]"></a>inv_reset_dmp_odr_counters</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_reset_dmp_odr_counters))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_reset_dmp_odr_counters &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_odr_counters
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
</UL>

<P><STRONG><a name="[28d]"></a>inv_resume_akm</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, inv_mems_slave_compass.o(i.inv_resume_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = inv_resume_akm &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[2cf]"></a>inv_rotation_to_quaternion</STRONG> (Thumb, 638 bytes, Stack size 72 bytes, ml_math_func.o(i.inv_rotation_to_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = inv_rotation_to_quaternion &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[14b]"></a>inv_serial_interface_read_hook</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, inv_mems_drv_hook.o(i.inv_serial_interface_read_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inv_serial_interface_read_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>

<P><STRONG><a name="[14a]"></a>inv_serial_interface_write_hook</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, inv_mems_drv_hook.o(i.inv_serial_interface_write_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>

<P><STRONG><a name="[2d3]"></a>inv_set_accel_cal_params</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.inv_set_accel_cal_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inv_set_accel_cal_params
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_cal_params
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[2b5]"></a>inv_set_accel_divider</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, inv_mems_base_driver.o(i.inv_set_accel_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_set_accel_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[2b7]"></a>inv_set_accel_fullscale</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_set_accel_fullscale &rArr; inv_set_mems_accel_fullscale &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_scale2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_fsr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_accel_fullscale
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[2d8]"></a>inv_set_accel_quaternion_gain</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.inv_set_accel_quaternion_gain))
<BR><BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_feedback_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[2b8]"></a>inv_set_chip_power_state</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_chip_power_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_100us
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_lpen_control
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
</UL>

<P><STRONG><a name="[2dd]"></a>inv_set_chip_to_body</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, inv_mems_data_converter.o(i.inv_set_chip_to_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_set_chip_to_body
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[14c]"></a>inv_set_chip_to_body_axis_quaternion</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, inv_mems_data_converter.o(i.inv_set_chip_to_body_axis_quaternion))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_set_chip_to_body_axis_quaternion &rArr; inv_rotation_to_quaternion &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q_mult
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[2b1]"></a>inv_set_dmp_address</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_dmp_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_set_dmp_address &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_dmp_start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
</UL>

<P><STRONG><a name="[2a5]"></a>inv_set_dmp_stepcounter_update_offset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mems_interface_mapping.o(i.inv_set_dmp_stepcounter_update_offset))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[2b4]"></a>inv_set_gyro_divider</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, inv_mems_base_driver.o(i.inv_set_gyro_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = inv_set_gyro_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[2b6]"></a>inv_set_gyro_fullscale</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = inv_set_gyro_fullscale &rArr; inv_set_mems_gyro_fullscale &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
</UL>

<P><STRONG><a name="[2a2]"></a>inv_set_gyro_sf</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, inv_mems_base_driver.o(i.inv_set_gyro_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_set_gyro_sf &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_sf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_fullscale
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[2a0]"></a>inv_set_hw_smplrt_dmp_odrs</STRONG> (Thumb, 508 bytes, Stack size 40 bytes, inv_mems_base_control.o(i.inv_set_hw_smplrt_dmp_odrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_set_hw_smplrt_dmp_odrs &rArr; inv_set_gyro_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_divider
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_divider
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_set_odr
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_accel_divider
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bac_rate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_quaternion_gain
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_cal_params
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyCompass
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRateDividerGet
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DividerRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[2d5]"></a>inv_set_mems_accel_fullscale</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, inv_mems_base_driver.o(i.inv_set_mems_accel_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_set_mems_accel_fullscale &rArr; inv_read_mems_reg &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_fullscale
</UL>

<P><STRONG><a name="[2df]"></a>inv_set_mems_gyro_fullscale</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, inv_mems_base_driver.o(i.inv_set_mems_gyro_fullscale))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_set_mems_gyro_fullscale &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_fullscale
</UL>

<P><STRONG><a name="[2e4]"></a>inv_set_odr</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, inv_mems_base_control.o(i.inv_set_odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inv_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_set_gyro_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_set_odr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_fullscale
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_prevent_lpen_control
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_pressure_availability
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_get_compass_availability
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_divider
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_pressure
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_needs_compass
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output_rates
</UL>

<P><STRONG><a name="[2e5]"></a>inv_set_secondary</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_set_secondary &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[2c7]"></a>inv_set_secondary_divider</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_set_secondary_divider))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_set_secondary_divider &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_set_odr
</UL>

<P><STRONG><a name="[14e]"></a>inv_set_slave_compass_id</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_set_slave_compass_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_set_slave_compass_id &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_init_secondary
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compass_dmp_cal
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desactivate_compass
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;activate_compass
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_prevent_lpen_control
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_allow_lpen_control
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[2cd]"></a>inv_setup_compass_akm</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, inv_mems_slave_compass.o(i.inv_setup_compass_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_suspend_akm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
</UL>

<P><STRONG><a name="[288]"></a>inv_sleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, inv_mems_drv_hook.o(i.inv_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_sleep &rArr; App_Delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Init_State
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_100us
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_read_secondary
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[2da]"></a>inv_sleep_100us</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, inv_mems_drv_hook.o(i.inv_sleep_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_sleep_100us &rArr; inv_sleep &rArr; App_Delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Init_State
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>

<P><STRONG><a name="[2a3]"></a>inv_sleep_mems</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, inv_mems_base_driver.o(i.inv_sleep_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_sleep_mems &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[28e]"></a>inv_suspend_akm</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, inv_mems_slave_compass.o(i.inv_suspend_akm))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_suspend_akm &rArr; inv_mems_secondary_stop_channel &rArr; inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_getstate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
</UL>

<P><STRONG><a name="[2bb]"></a>inv_transpose_quaternion_to_rotation</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, ml_math_func.o(i.inv_transpose_quaternion_to_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_transpose_quaternion_to_rotation
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q29_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_get_orientation
</UL>

<P><STRONG><a name="[296]"></a>inv_wakeup_mems</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inv_mems_base_driver.o(i.inv_wakeup_mems))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_wakeup_mems &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[284]"></a>inv_write_mems</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, inv_mems_transport.o(i.inv_write_mems), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_dmpdriver_write_mems
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_firmware_load
</UL>

<P><STRONG><a name="[28c]"></a>inv_write_mems_reg</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, inv_mems_transport.o(i.inv_write_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_FIFO_RST_Diamond
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_divider
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_accel_divider
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_secondary
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_secondary
</UL>

<P><STRONG><a name="[2ac]"></a>inv_write_secondary</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, inv_mems_secondary_transport.o(i.inv_write_secondary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_resume_akm
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_suspend_bmp
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_execute_write_secondary
</UL>

<P><STRONG><a name="[237]"></a>inv_write_single_mems_reg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, inv_mems_transport.o(i.inv_write_single_mems_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = inv_write_single_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_chip_power_state
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_reg_access_lp_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_initialize_lower_driver
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_pressure_resume_bmp
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary_divider
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_secondary
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_gyro_fullscale
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_mems_accel_fullscale
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_wakeup_mems
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_stop_channel
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_enable_i2c
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_secondary_disable_i2c
</UL>

<P><STRONG><a name="[287]"></a>inv_write_single_mems_reg_core</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, inv_mems_transport.o(i.inv_write_single_mems_reg_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_bank
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_recover_setting
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[2ec]"></a>inverse_sqrt_q15</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, ml_math_func.o(i.inverse_sqrt_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inverse_sqrt_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reciprocal_fun_q15
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = main &rArr; App_Init &rArr; ICM_20948_Init &rArr; self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Start_FreeRTOS
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[238]"></a>mpu_set_FIFO_RST_Diamond</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.mpu_set_FIFO_RST_Diamond))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
</UL>

<P><STRONG><a name="[26d]"></a>process_sensor_output</STRONG> (Thumb, 1940 bytes, Stack size 96 bytes, icm20948.o(i.process_sensor_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = process_sensor_output &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_compute_scalar_part
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_9quaternion
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_6quaternion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[2fc]"></a>pvPortMalloc</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2fa]"></a>pxPortInitialiseStack</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[271]"></a>q_rsqrt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_angle.o(i.q_rsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = q_rsqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_attitude_angle
</UL>

<P><STRONG><a name="[226]"></a>reciprocal_fun_q15</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ml_math_func.o(i.reciprocal_fun_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = reciprocal_fun_q15 &rArr; inverse_sqrt_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse_sqrt_q15
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q15_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2_q15
</UL>

<P><STRONG><a name="[14f]"></a>self_test</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, icm20948.o(i.self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = self_test &rArr; inv_mems_run_selftest &rArr; inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_bias
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[154]"></a>set_output_rates</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, icm20948.o(i.set_output_rates))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = set_output_rates &rArr; inv_set_odr &rArr; inv_set_hw_smplrt_dmp_odrs &rArr; inv_set_gyro_divider &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reset_dmp_odr_counters
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM_20948_Init
</UL>

<P><STRONG><a name="[2dc]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_to_body_axis_quaternion
</UL>

<P><STRONG><a name="[222]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[2d0]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_rotation_to_quaternion
</UL>

<P><STRONG><a name="[1cb]"></a>ssd1306_I2C_Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, bsp_ssd1306.o(i.ssd1306_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_UpdateScreen
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_Init
</UL>

<P><STRONG><a name="[1ce]"></a>ssd1306_I2C_WriteMulti</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_ssd1306.o(i.ssd1306_I2C_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ssd1306_I2C_WriteMulti &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSD1306_UpdateScreen
</UL>

<P><STRONG><a name="[81]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Steering_with_car
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Ctrl
</UL>

<P><STRONG><a name="[2ad]"></a>test_limits_and_scale</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, ml_math_func.o(i.test_limits_and_scale))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = test_limits_and_scale
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_highest_bit_position
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_fast_sqrt
</UL>

<P><STRONG><a name="[2ee]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2fb]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[2f9]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2f0]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[2ef]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2f2]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2f4]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2f7]"></a>vPortFree</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[30d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[a7]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
</UL>

<P><STRONG><a name="[b8]"></a>vTaskStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Start_FreeRTOS
</UL>

<P><STRONG><a name="[2fd]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[56]"></a>vTaskSwitchContext</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[4d]"></a>vTask_App_Handle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app.o(i.vTask_App_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTask_App_Handle &rArr; Bat_Show_LED_Handle &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Show_LED_Handle
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Loop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[4c]"></a>vTask_Auto_Report</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, app.o(i.vTask_Auto_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTask_Auto_Report &rArr; ICM20948_Send_Raw_Data &rArr; USART1_Send_ArrayU8 &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Enable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Raw_Data
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Send_Attitude_Data
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Raw_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Send_Attitude_Data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Send_Count_Now
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Send_Data
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[4a]"></a>vTask_Control</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, app.o(i.vTask_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = vTask_Control &rArr; Upper_Data_Parse &rArr; Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Enable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SBUS_Handle
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse_Low_Battery
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Data_Parse
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Request_Data
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RxBuffer
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Request_Flag
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CMD_Length
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CMD_Flag
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_CMD_Flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[4e]"></a>vTask_IMU</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app.o(i.vTask_IMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = vTask_IMU &rArr; ICM20948_Read_Data_Handle &rArr; fifo_handler &rArr; process_sensor_output &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Read_Data_Handle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Read_Data_Handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[4b]"></a>vTask_Key</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, app.o(i.vTask_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vTask_Key &rArr; Flash_Reset_All_Value &rArr; Flash_Set_PID &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_State
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_Long_Press
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_set_effect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Clear
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_All_Value
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Reset_MCU
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[4f]"></a>vTask_OLED</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, app.o(i.vTask_OLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vTask_OLED &rArr; OLED_Show_Motor_Speed &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Test_Read_State
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Enable
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_YAW
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Voltage
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_UART_Servo_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Test_Mode_Error
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Motor_Speed
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_CarType
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Motor_Speed
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Yaw_Now
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM20948_Get_Yaw_Now
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_TestMode
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Voltage_Z10
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Clear_Yaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[49]"></a>vTask_Speed</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app.o(i.vTask_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = vTask_Speed &rArr; Motion_Handle &rArr; Motion_Get_Speed &rArr; Motion_Yaw_Calc &rArr; Mecanum_Yaw_Calc &rArr; PID_Yaw_Calc &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Enable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Update_Count
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.App_Start_FreeRTOS)
</UL>
<P><STRONG><a name="[301]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Start_FreeRTOS
</UL>

<P><STRONG><a name="[309]"></a>xTaskDelayUntil</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
</UL>

<P><STRONG><a name="[308]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Speed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_IMU
</UL>

<P><STRONG><a name="[30f]"></a>xTaskIncrementTick</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[2ff]"></a>xTaskResumeAll</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1d4]"></a>SetSysClock</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[bd]"></a>Bat_Check_Voltage</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_bat.o(i.Bat_Check_Voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bat_Check_Voltage &rArr; Bat_Get_Over_Voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Get_Over_Voltage
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Get_Low_Voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_State
</UL>

<P><STRONG><a name="[181]"></a>Motion_Get_Circle_Pulse</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_motion.o(i.Motion_Get_Circle_Pulse))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Speed
</UL>

<P><STRONG><a name="[118]"></a>Flash_AKM_Angle_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_flash.o(i.Flash_AKM_Angle_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Flash_AKM_Angle_Init &rArr; Ackerman_Set_Default_Angle &rArr; Flash_Set_AKM_Angle &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ackerman_Set_Default_Angle
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_AKM_Angle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_AKM_Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[11a]"></a>Flash_ARM_Mid_Offset_Init</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, app_flash.o(i.Flash_ARM_Mid_Offset_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Flash_ARM_Mid_Offset_Init &rArr; Flash_Reset_ARM_Median_Value &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_ARM_Median_Value
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartServo_Set_Median_Value
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Reset_ARM_Median_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[11e]"></a>Flash_Auto_Report_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Auto_Report_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_Auto_Report_Init &rArr; Flash_Read_Auto_Report &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Auto_Report
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Auto_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[121]"></a>Flash_CarType_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_flash.o(i.Flash_CarType_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Flash_CarType_Init &rArr; Flash_Read_CarType &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Set_Car_Type
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_CarType
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[128]"></a>Flash_PID_Init</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, app_flash.o(i.Flash_PID_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Flash_PID_Init &rArr; Flash_Set_PID &rArr; Flash_Write &rArr; Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Yaw_Set_Parm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Set_Motor_Parm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Yaw_PID
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_PID
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_Yaw_PID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_PID
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[119]"></a>Flash_Read_AKM_Angle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Read_AKM_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Read_AKM_Angle &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_AKM_Angle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AKM_Angle_Init
</UL>

<P><STRONG><a name="[11f]"></a>Flash_Read_Auto_Report</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Read_Auto_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Read_Auto_Report &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_Auto_Report
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Auto_Report_Init
</UL>

<P><STRONG><a name="[122]"></a>Flash_Read_CarType</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Read_CarType))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Read_CarType &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Set_CarType
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_CarType_Init
</UL>

<P><STRONG><a name="[129]"></a>Flash_Read_PID</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_flash.o(i.Flash_Read_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flash_Read_PID &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
</UL>

<P><STRONG><a name="[126]"></a>Flash_Read_Reset_State</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_flash.o(i.Flash_Read_Reset_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Flash_Read_Reset_State &rArr; Flash_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
</UL>

<P><STRONG><a name="[12c]"></a>Flash_Read_Yaw_PID</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, app_flash.o(i.Flash_Read_Yaw_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Flash_Read_Yaw_PID &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_PID_Init
</UL>

<P><STRONG><a name="[214]"></a>app_rbg_gradient</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, app_rgb.o(i.app_rbg_gradient))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_rbg_gradient &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_remix_u8
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_remix
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
</UL>

<P><STRONG><a name="[218]"></a>app_rgb_battery</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_rgb.o(i.app_rgb_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_rgb_battery &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Voltage_Z10
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_battery_84V
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_battery_126V
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
</UL>

<P><STRONG><a name="[21b]"></a>app_rgb_breathing</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, app_rgb.o(i.app_rgb_breathing))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_rgb_breathing &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
</UL>

<P><STRONG><a name="[21d]"></a>app_rgb_marquee</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, app_rgb.o(i.app_rgb_marquee))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_rgb_marquee &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color_U32
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_remix
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
</UL>

<P><STRONG><a name="[21e]"></a>app_rgb_starbright</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, app_rgb.o(i.app_rgb_starbright))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_rgb_starbright &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
</UL>

<P><STRONG><a name="[21c]"></a>app_rgb_waterfall</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, app_rgb.o(i.app_rgb_waterfall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_rgb_waterfall &rArr; RGB_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Update
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color_U32
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_effects_handle
</UL>

<P><STRONG><a name="[219]"></a>rgb_battery_126V</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, app_rgb.o(i.rgb_battery_126V))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rgb_battery_126V
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
</UL>

<P><STRONG><a name="[21a]"></a>rgb_battery_84V</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, app_rgb.o(i.rgb_battery_84V))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rgb_battery_84V
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Set_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_battery
</UL>

<P><STRONG><a name="[216]"></a>rgb_remix</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, app_rgb.o(i.rgb_remix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rgb_remix
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rgb_marquee
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rbg_gradient
</UL>

<P><STRONG><a name="[217]"></a>rgb_remix_u8</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, app_rgb.o(i.rgb_remix_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rgb_remix_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_rbg_gradient
</UL>

<P><STRONG><a name="[e0]"></a>Bsp_imu_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp.o(i.Bsp_imu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Bsp_imu_init &rArr; OLED_Show_Error &rArr; OLED_Draw_Line &rArr; OLED_Draw_String &rArr; OLED_Refresh &rArr; SSD1306_UpdateScreen &rArr; ssd1306_I2C_Write &rArr; i2cWrite &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Show_Error
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Long_Beep_Alarm
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Get_Imu_Type
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_MPU_Scanf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_Init
</UL>

<P><STRONG><a name="[cf]"></a>Beep_Get_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_beep.o(i.Beep_Get_State))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Timeout_Close_Handle
</UL>

<P><STRONG><a name="[d0]"></a>Beep_Get_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_beep.o(i.Beep_Get_Time))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Timeout_Close_Handle
</UL>

<P><STRONG><a name="[cc]"></a>Beep_Set_State</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_beep.o(i.Beep_Set_State))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_Timeout_Close_Handle
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
</UL>

<P><STRONG><a name="[cd]"></a>Beep_Set_Time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_beep.o(i.Beep_Set_Time))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beep_On_Time
</UL>

<P><STRONG><a name="[137]"></a>Flash_GetStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitDone
</UL>

<P><STRONG><a name="[13a]"></a>Flash_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[130]"></a>Flash_ReadHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_ReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
</UL>

<P><STRONG><a name="[138]"></a>Flash_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_flash.o(i.Flash_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[125]"></a>Flash_WaitDone</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_flash.o(i.Flash_WaitDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ErasePage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
</UL>

<P><STRONG><a name="[13b]"></a>Flash_WriteHalfWord</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_flash.o(i.Flash_WriteHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_NoCheck
</UL>

<P><STRONG><a name="[139]"></a>Flash_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, bsp_flash.o(i.Flash_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Flash_Write_NoCheck &rArr; Flash_WriteHalfWord &rArr; Flash_WaitDone
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[1e0]"></a>USART1_DMA_Init</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, bsp_usart.o(i.USART1_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART1_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[156]"></a>Delay_For_Pin</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_io_i2c.o(i.Delay_For_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>

<P><STRONG><a name="[190]"></a>Motor_Ignore_Dead_Zone</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_motor.o(i.Motor_Ignore_Dead_Zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Ignore_Dead_Zone
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motion_Get_Car_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Set_Pwm
</UL>

<P><STRONG><a name="[15b]"></a>Key1_is_Press</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_key.o(i.Key1_is_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key1_is_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key1_State
</UL>

<P><STRONG><a name="[107]"></a>Encoder_Init_TIM2</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, bsp_encoder.o(i.Encoder_Init_TIM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Encoder_Init_TIM2 &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_JTAG_Set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
</UL>

<P><STRONG><a name="[10a]"></a>Encoder_Init_TIM3</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bsp_encoder.o(i.Encoder_Init_TIM3))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Encoder_Init_TIM3 &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
</UL>

<P><STRONG><a name="[108]"></a>Encoder_Init_TIM4</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bsp_encoder.o(i.Encoder_Init_TIM4))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Encoder_Init_TIM4 &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
</UL>

<P><STRONG><a name="[109]"></a>Encoder_Init_TIM5</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, bsp_encoder.o(i.Encoder_Init_TIM5))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Encoder_Init_TIM5 &rArr; TIM_ICInit &rArr; TI4_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
</UL>

<P><STRONG><a name="[117]"></a>Encoder_Read_CNT</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, bsp_encoder.o(i.Encoder_Read_CNT))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Update_Count
</UL>

<P><STRONG><a name="[1c6]"></a>Spi_gpio_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bsp_spi.o(i.Spi_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Spi_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[90]"></a>Adc_Get</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_adc.o(i.Adc_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adc_Get &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Get_Average
</UL>

<P><STRONG><a name="[f5]"></a>CAN_Filter_Init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bsp_can.o(i.CAN_Filter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN_Filter_Init &rArr; CAN_FilterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[f0]"></a>CAN_GPIO_Init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_can.o(i.CAN_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[f3]"></a>CAN_Get_Prescaler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bsp_can.o(i.CAN_Get_Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[f6]"></a>CAN_NVIC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_can.o(i.CAN_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_NVIC_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Config_Init
</UL>

<P><STRONG><a name="[fd]"></a>CAN_Parse_Data</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_can.o(i.CAN_Parse_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = CAN_Parse_Data &rArr; Upper_CAN_Execute_Command &rArr; Motion_Ctrl_State &rArr; Ackerman_State &rArr; Ackerman_Ctrl &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_CAN_Execute_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1ae]"></a>RGB_DMA_Init</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, bsp_rgb.o(i.RGB_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RGB_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Driver_Init
</UL>

<P><STRONG><a name="[1b2]"></a>RGB_Driver_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_rgb.o(i.RGB_Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RGB_Driver_Init &rArr; RGB_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Spi_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init
</UL>

<P><STRONG><a name="[1b4]"></a>RGB_GPIO_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_rgb.o(i.RGB_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RGB_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Init
</UL>

<P><STRONG><a name="[1b3]"></a>RGB_Spi_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bsp_rgb.o(i.RGB_Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RGB_Spi_Init &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Driver_Init
</UL>

<P><STRONG><a name="[15d]"></a>MPU_Basic_Init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, bsp_mpu9250.o(i.MPU_Basic_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MPU_Basic_Init &rArr; MPU_Read_Byte &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; Delay_For_Pin
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_ADDR_CTRL
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU9250_Init
</UL>

<P><STRONG><a name="[16e]"></a>Delay_For_Pin</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_mpuiic.o(i.Delay_For_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_For_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
</UL>

<P><STRONG><a name="[1da]"></a>TI1_Config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1dc]"></a>TI2_Config</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1de]"></a>TI3_Config</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[1d8]"></a>TI4_Config</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_tim.o(i.TI4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[2fe]"></a>prvHeapInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, heap_2.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[52]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[2ed]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[2f1]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2f5]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2f6]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[53]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2f8]"></a>prvInitialiseNewTask</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2f3]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[310]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[262]"></a>inv_q16_to_float</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, icm20948.o(i.inv_q16_to_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_q16_to_float &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_handler
</UL>

<P><STRONG><a name="[102]"></a>DividerRateSet</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.DividerRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DividerRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_sensor_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[179]"></a>MinDelayGenActual</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, inv_mems_base_control.o(i.MinDelayGenActual))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyGyro
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyCompass
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMinDlyAccel
</UL>

<P><STRONG><a name="[2e1]"></a>SampleRateDividerGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.SampleRateDividerGet))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[26e]"></a>getMinDlyAccel</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.getMinDlyAccel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getMinDlyAccel &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[26f]"></a>getMinDlyCompass</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.getMinDlyCompass))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getMinDlyCompass &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[270]"></a>getMinDlyGyro</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, inv_mems_base_control.o(i.getMinDlyGyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = getMinDlyGyro &rArr; MinDelayGenActual
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_androidSensor_enabled
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MinDelayGenActual
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
</UL>

<P><STRONG><a name="[277]"></a>inv_convert_androidSensor_to_control</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, inv_mems_base_control.o(i.inv_convert_androidSensor_to_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inv_convert_androidSensor_to_control &rArr; inv_reGenerate_sensorControl
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_reGenerate_sensorControl
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor_internal
</UL>

<P><STRONG><a name="[297]"></a>inv_enable_sensor_internal</STRONG> (Thumb, 844 bytes, Stack size 40 bytes, inv_mems_base_control.o(i.inv_enable_sensor_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = inv_enable_sensor_internal &rArr; inv_enable_mems_hw_sensors &rArr; inv_mems_pressure_resume_bmp &rArr; inv_execute_write_secondary &rArr; inv_write_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_augmented_sensors_update_odr
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_fullscale
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep_mems
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_gyro_sf
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_stepcounter_update_offset
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_gyro_divider
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_mems_hw_sensors
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_motion_event_control
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_rdy_status
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control2
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_output_control1
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_data_interrupt_control
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_pickup
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_pedometer_get_all_steps
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_hw_smplrt_dmp_odrs
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_tilt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_activity_classifier
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_androidSensor_to_control
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[291]"></a>sensor_needs_compass</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.sensor_needs_compass))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[293]"></a>sensor_needs_pressure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, inv_mems_base_control.o(i.sensor_needs_pressure))
<BR><BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_odr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_enable_sensor
</UL>

<P><STRONG><a name="[2e6]"></a>activate_compass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.activate_compass))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[2e7]"></a>desactivate_compass</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.desactivate_compass))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_slave_compass_id
</UL>

<P><STRONG><a name="[2db]"></a>inv_mems_get_lpen_control</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inv_mems_base_driver.o(i.inv_mems_get_lpen_control))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_chip_power_state
</UL>

<P><STRONG><a name="[27a]"></a>inv_q_mult_q_qi</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, inv_mems_data_converter.o(i.inv_q_mult_q_qi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inv_q_mult_q_qi
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_q30_mult
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector_1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_convert_rotation_vector
</UL>

<P><STRONG><a name="[24d]"></a>check_fifo_decoded_headers</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, inv_mems_mpu_fifo_control.o(i.check_fifo_decoded_headers))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
</UL>

<P><STRONG><a name="[22d]"></a>dmp_get_fifo_all</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, inv_mems_mpu_fifo_control.o(i.dmp_get_fifo_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dmp_get_fifo_all &rArr; dmp_read_fifo &rArr; dmp_reset_fifo &rArr; mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_get_fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_swmirror
</UL>

<P><STRONG><a name="[24b]"></a>extract_sample_cnt</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, inv_mems_mpu_fifo_control.o(i.extract_sample_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = extract_sample_cnt &rArr; dmp_reset_fifo &rArr; mpu_set_FIFO_RST_Diamond &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_reset_fifo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_packet_size_and_samplecnt
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fifo_decoded_headers
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_swmirror
</UL>

<P><STRONG><a name="[24c]"></a>get_packet_size_and_samplecnt</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, inv_mems_mpu_fifo_control.o(i.get_packet_size_and_samplecnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_packet_size_and_samplecnt
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_fifo_pop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_sample_cnt
</UL>

<P><STRONG><a name="[2c4]"></a>inv_check_accelgyro_self_test</STRONG> (Thumb, 114 bytes, Stack size 52 bytes, inv_mems_mpu_selftest.o(i.inv_check_accelgyro_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = inv_check_accelgyro_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[285]"></a>inv_do_test_accelgyro</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, inv_mems_mpu_selftest.o(i.inv_do_test_accelgyro))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inv_do_test_accelgyro &rArr; inv_selftest_read_samples &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_selftest_read_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[2c5]"></a>inv_recover_setting</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, inv_mems_mpu_selftest.o(i.inv_recover_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = inv_recover_setting &rArr; inv_setup_compass_akm &rArr; inv_execute_read_secondary &rArr; inv_read_secondary &rArr; inv_write_mems_reg &rArr; inv_set_chip_power_state &rArr; inv_write_single_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_compass_akm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_set_dmp_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[2d2]"></a>inv_save_setting</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, inv_mems_mpu_selftest.o(i.inv_save_setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inv_save_setting &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_setup_selftest
</UL>

<P><STRONG><a name="[286]"></a>inv_selftest_read_samples</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, inv_mems_mpu_selftest.o(i.inv_selftest_read_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = inv_selftest_read_samples &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_do_test_accelgyro
</UL>

<P><STRONG><a name="[2c3]"></a>inv_setup_selftest</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, inv_mems_mpu_selftest.o(i.inv_setup_selftest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = inv_setup_selftest &rArr; inv_save_setting &rArr; inv_read_mems_reg_core &rArr; inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_save_setting
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mems_run_selftest
</UL>

<P><STRONG><a name="[229]"></a>check_reg_access_lp_disable</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, inv_mems_transport.o(i.check_reg_access_lp_disable))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_get_batch_mode_status
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg
</UL>

<P><STRONG><a name="[2cb]"></a>inv_set_bank</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inv_mems_transport.o(i.inv_set_bank))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inv_set_bank &rArr; inv_serial_interface_write_hook &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_write_hook
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_serial_interface_read_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_single_mems_reg_core
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_write_mems_reg
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_read_mems_reg_core
</UL>

<P><STRONG><a name="[210]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[202]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[212]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[211]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
